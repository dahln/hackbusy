@page "/"

<div class="row mt-5">
    <div class="col-lg-8 offset-lg-2 mt-5">
        <strong>@_processing[_processingIndex]...</strong>
        <strong class="float-right">@_completed of @_queue completed</strong>
    </div>
</div>
<div class="row">
    <div class="col-lg-8 offset-lg-2">
        <div class="progress" style="height: 25px;">
            <div class="progress-bar" role="progressbar" style="width: @_percent%" aria-valuenow="@_percent" aria-valuemin="0" aria-valuemax="100">@_percent%</div>
        </div>
    </div>
</div>
<div class="row mt-3">
    <div class="col-lg-8 offset-lg-2">
        <span class="hash">Hash: @_hash</span>
    </div>
</div>


@code {

    private int _percent { get; set; } = 0;
    private int _processingIndex { get; set; } = 0;
    private List<string> _processing { get; set; } = new List<string>()
    {
        "Processing",
        "Compressing",
        "Sending",
        "Extracting",   
        "Calculating",   
        "Terminating",   
        "Moving",   
        "Copying",   
        "Parsing",   
        "Loading",   
        "Transfering",   
        "Determining Derivative",   
        "Translating",   
        "Solving",   
        "Opening",   
        "Building",   
        "Compiling",   
        "Encrypting",   
    };
    private string _hash { get; set; }
    private int _completed { get; set; } = 0;
    private int _queue { get; set; } = 5;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadLoop();
    }

    public async Task LoadLoop()
    {
        Random rand = new Random();
        for(_percent = 0; _percent <= 100; _percent++)
        {
            if(_percent >= 100)
            {
                await Task.Delay(1000);

                _percent = 0;
                _hash = "";
                _queue += rand.Next(0,5);
                _completed++;
                StateHasChanged();
                await Task.Delay(1000);
            }
            else
            {
                _processingIndex = rand.Next(0, _processing.Count);
                _hash = $"{Guid.NewGuid().ToString()}-{Guid.NewGuid().ToString()}";
                StateHasChanged();
                await Task.Delay(rand.Next(1,300));
            }
        }
    }

}

